{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django Stripe","text":"<p><code>django-stripe</code> is an open source Python package that simplifies the integration of Stripe payments into your Django web application. Its key features include:</p> <ul> <li>Full support for Stripe's B2C Subscription.</li> <li>Actions that help synchronize customers, subscriptions, coupons, prices, and products data from Stripe.</li> <li>Built-in webhook handling for secure communication with Stripe.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can easily install or upgrade to the latest version of the package using pip:</p> <pre><code>pip install django-stripe\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>In your settings, update <code>STRIPE_CONFIG</code>:</p> <pre><code>STRIPE_CONFIG = {\n    \"API_VERSION\": \"2022-11-15\", # Stripe API Version\n    \"API_KEY\": \"api_key\", # Stripe Secret Key\n}\n</code></pre>"},{"location":"#references","title":"References","text":"<p>Stripe API Doc: https://stripe.com/docs/api</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li><code>StripeCard</code> model that will store stripe card data.</li> <li><code>StripeCardAction</code> action that will sync card data from stripe.</li> </ul>"},{"location":"changelog/#010-2024-09-20","title":"[0.1.0] - 2024-09-20","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Stripe Models: <code>StripeCustomer</code>, <code>StripeEvent</code>, <code>StripeCard</code>,   <code>StripeProduct</code>, <code>StripePrice</code>, and <code>StripeSubscription</code>   models that simplify the integration with Stripe.</li> <li>Stripe Action Mixin: <code>StripeSyncActionMixin</code>,   <code>StripeSoftDeleteMixin</code> mixins that simplify the integration   with Stripe.</li> <li>Stripe Actions: <code>StripeCustomerAction</code>,   <code>StripeSubscriptionAction</code>, <code>StripeEventAction</code>,   <code>StripeCouponAction</code>, <code>StripePriceAction</code> and   <code>StripeProductAction</code> actions that simplify the integration   with Stripe.</li> <li>Stripe Abstract Webhook: <code>StripeWebhook</code> class that provides a   simple and flexible way to process incoming webhook requests.</li> <li>Stripe Webhooks:</li> <li> <ul> <li><code>CustomerCreatedWebhook</code> to process customer created event.</li> </ul> </li> <li><code>CustomerUpdatedWebhook</code> to process customer updated event.</li> <li><code>CustomerDeletedWebhook</code> to process customer deleted event.</li> <li><code>SubscriptionCreatedWebhook</code> to process subscription created event.</li> <li><code>SubscriptionUpdatedWebhook</code> to process subscription updated event.</li> <li><code>SubscriptionDeletedWebhook</code> to process subscription deleted event.</li> <li><code>SubscriptionTrialWillEndWebhook</code> to process subscription trial will end event.</li> <li><code>ProductCreatedWebhook</code> to process product created event.</li> <li><code>ProductUpdatedWebhook</code> to process product updated event.</li> <li><code>ProductDeletedWebhook</code> to process product deleted event.</li> <li><code>PriceCreatedWebhook</code> to process price created event.</li> <li><code>PriceUpdatedWebhook</code> to process price updated event.</li> <li><code>PriceDeletedWebhook</code> to process price deleted event.</li> <li><code>CouponCreatedWebhook</code> to process coupon created event.</li> <li><code>CouponUpdatedWebhook</code> to process coupon updated event.</li> <li><code>CouponDeletedWebhook</code> to process coupon deleted event.</li> </ul>"},{"location":"library/quickstart/","title":"Quickstart","text":""},{"location":"library/quickstart/#installation","title":"Installation","text":"<p>Install the package using pip:</p> <pre><code>pip install django-stripe\n</code></pre>"},{"location":"library/quickstart/#update-installed-apps","title":"Update Installed Apps","text":"<p>Add <code>django_stripe</code> to your <code>INSTALLED_APPS</code> setting in your Django project's settings file:</p> <pre><code>INSTALLED_APPS = [\n    ...,\n    'django_stripe',\n]\n</code></pre>"},{"location":"library/quickstart/#database-migration","title":"Database migration","text":"<p>After implementing the models, create a migration file using the following command:</p> <pre><code>python manage.py makemigrations\n</code></pre> <p>Once the migration file has been created, apply the migrations to the database using the following command:</p> <pre><code>python manage.py migrate\n</code></pre>"},{"location":"library/quickstart/#update-settings","title":"Update Settings","text":"<p>In your Django project's settings file, update the model paths in <code>STRIPE_CONFIG</code>:</p> <pre><code>STRIPE_CONFIG = {\n    \"API_VERSION\": \"2022-11-15\", # Stripe API Version\n    \"API_KEY\": \"api_key\", # Stripe Secret Key\n}\n</code></pre>"},{"location":"library/quickstart/#implement-apis","title":"Implement APIs","text":"<p>You can use the appropriate actions to build payment APIs. Here are some examples:</p>"},{"location":"library/quickstart/#syncing-a-customer","title":"Syncing a customer","text":"<pre><code>from django.contrib.auth.models import  User\nfrom django_stripe.actions import StripeCustomerAction\nfrom django_stripe.models import StripeCustomer\nimport stripe\n\nuser = User.objects.get(email=\"test@example.com\")\naction = StripeCustomerAction()\nstripe_customer = StripeCustomer.objects.get(user=user)\n\nstripe_customer_data = stripe.Customer.retrieve(stripe_customer.stripe_id)\n\n# Pass user model instance and email as argument\ncustomer = StripeCustomerAction().sync(stripe_data=stripe_customer_data)\n</code></pre>"},{"location":"library/actions/","title":"Actions","text":"<p>The <code>django-stripe</code> package provides a set of actions which are used to sync data from Stripe to the local database. Actions are designed to be used in your application code to interact with Stripe.</p> <p>Actions are organized by the type of Stripe object they interact with. For example, the <code>StripeCustomerAction</code> is used to sync customer objects from Stripe to the local database.</p> <p>Each action provides a set of methods which are used to perform syncing operations on the Stripe object. For example, the <code>StripeCustomerAction</code> provides methods to sync all customer objects from Stripe to the local database and to soft delete a customer object in the local database.</p>"},{"location":"library/actions/#using-actions","title":"Using Actions","text":"<p>Actions are typically used in your application code to sync data from Stripe to the local database. To use an action, you must first create an instance of the action class.</p> <p>For example, to use the <code>StripeCustomerAction</code> to sync all customer objects from Stripe to the local database, you would create an instance of the action class and call the <code>sync_all</code> method:</p> <p>Sync all customers</p> <pre><code>from django_stripe.actions import StripeCustomerAction\n\nstripe_action = StripeCustomerAction()\nstripe_action.sync_all()\n</code></pre>"},{"location":"library/actions/cards/","title":"Card","text":"<p>Actions related to cards in Stripe that can be used for various purposes.</p> <p>Example</p> <pre><code>from django_stripe.actions import StripeCard\n\n# Set default card for a customer using the stripe provided card token\nStripeCard.set_default_card(customer, card_token)\n</code></pre>"},{"location":"library/actions/cards/#set-default-card-for-a-customer","title":"Set default card for a customer","text":"<p>This method creates a new source object, sets it as the new default source for the customer, and deletes the old default source, if there was one.</p> <p>Method</p> <pre><code>from django_stripe.actions import StripeCard\n\nStripeCard.set_default_card(customer, card_token)\n</code></pre> <p>Returns</p> <p>Local Card object</p> <p>Arguments</p> Argument Description customer Customer object to update the source for card_token The token obtained from Stripe.js"},{"location":"library/actions/cards/#delete-card","title":"Delete card","text":"<p>Deletes a card for a customer from both Stripe and the local database.</p> <p><pre><code>from django_stripe.actions import StripeCard\n\nStripeCard.delete_card(customer, source_stripe_id)\n</code></pre> Returns</p> <p><code>None</code></p> <p>Arguments</p> Argument Description customer The customer object to update the source for source_stripe_id The Stripe ID of the card to delete from Stripe"},{"location":"library/actions/cards/#sync-customer-from-stripe-data","title":"Sync customer from stripe data","text":"<p>Updates the local payment source object with the corresponding data retrieved from Stripe.</p> <p>Method</p> <pre><code>from django_stripe.actions import StripeCard\n\nStripeCard.sync_from_stripe_data(customer, source)\n</code></pre> <p>Returns</p> <p>Local Card object</p> <p>Arguments</p> Argument Description customer The customer object associated with the payment source source The Stripe source data used to update the local object"},{"location":"library/actions/cards/#sync-card","title":"Sync card","text":"<p>This method synchronizes a local Card object with the Stripe API. If no <code>source</code> is provided, it will fetch the details from Stripe.</p> <p>Method</p> <pre><code>from django_stripe.actions import StripeCard\n\nStripeCard.sync(customer)\n</code></pre> <p>Returns</p> <p>Local Card object</p> <p>Arguments</p> Argument Description customer Customer's object source (Optional) Stripe card object that returned from stripe API  Default: <code>None</code> <p>Note</p> <p>It will fetch the details from stripe if source is not passed.</p>"},{"location":"library/actions/cards/#retrieve-card-for-customer","title":"Retrieve card for customer","text":"<p>Retrieves the default payment source (card) for a given customer.</p> <p>Method</p> <pre><code>from django_stripe.actions import StripeCard\n\nStripeCard.get_for_customer(customer)\n</code></pre> <p>Returns</p> <p>Local Card object</p> <p>Arguments</p> Argument Description customer Customer's object"},{"location":"library/actions/cards/#delete-local-card","title":"Delete Local Card","text":"<p>Deletes the local card object.</p> <p>Method</p> <pre><code>from django_stripe.actions import StripeCard\n\nStripeCard.delete(stripe_id)\n</code></pre> <p>Returns</p> <p><code>None</code></p> <p>Arguments</p> Argument Description stripe_id Card stripe id"},{"location":"library/actions/billings/subscriptions/","title":"Stripe Subscription Action","text":"<p>The <code>StripeSubscriptionAction</code> class is a part of the Django Stripe library, which provides a set of actions for synchronizing local Stripe subscription data with the Stripe API. This class is designed to handle the complexities of retrieving and updating subscription data, making it easier to integrate Stripe with your Django application.</p> <p>The <code>StripeSubscriptionAction</code> class is defined in the <code>django_stripe.actions</code> module and has the following key characteristics:</p> <ul> <li>Model Class: The <code>StripeSubscriptionAction</code> class is associated with the <code>StripeSubscription</code> model.</li> <li>Stripe Object Class: The class uses the <code>stripe.Subscription</code> object to interact with the Stripe API.</li> <li>Syncing Method: The class provides a <code>sync_all</code> method to synchronize all local Stripe subscription data with the Stripe API.</li> </ul> <p>Overall, the <code>StripeSubscriptionAction</code> class provides a convenient and efficient way to manage Stripe subscription data in your Django application.</p>"},{"location":"library/actions/billings/subscriptions/#methods","title":"Methods","text":""},{"location":"library/actions/billings/subscriptions/#sync-all-subscriptions","title":"Sync All Subscriptions","text":"<p>Method: <code>sync_all(self)</code></p> <p>This method is used to synchronize all local Stripe subscriptions data with the Stripe API. It retrieves a batch of subscriptions from the Stripe API and then iterates over them, calling the <code>sync</code> method on each one.</p> <p>Sync all subscriptions</p> <pre><code>from django_stripe.actions import StripeSubscriptionAction\n\nstripe_action = StripeSubscriptionAction()\nstripe_action.sync_all()\n</code></pre> <p>In this example, the <code>sync_all</code> method is called to synchronize all local Stripe customer data with the Stripe API.</p>"},{"location":"library/actions/billings/subscriptions/#sync-subscriptions-for-given-ids","title":"Sync Subscriptions for given IDs","text":"<p>Method: <code>sync_by_ids(self, ids: list)</code></p> <p>This method is used to synchronize local Stripe customer data for a specific list of customer IDs. It retrieves the subscriptions from the Stripe API and then iterates over them, calling the <code>sync</code> method on each one.</p> <p>Sync Subscriptions for given IDs</p> <pre><code>from django_stripe.actions import StripeSubscriptionAction\n\nstripe_action = StripeSubscriptionAction()\nids = ['sub_1MowQVLkdIwHu7ixeRlqHVzs', 'sub_1MowQVLkdIwHu7ixeRlqHVzw']\nstripe_action.sync_by_ids(ids)\n</code></pre> <p>In this example, the <code>sync_by_ids</code> method is called with a list of customer IDs to synchronize.</p>"},{"location":"library/actions/billings/subscriptions/#sync-batch-of-subscriptions","title":"Sync Batch of Subscriptions","text":"<p>Methods: <code>sync_batch(self, batch:list[dict])</code></p> <p>This method is used to synchronize a batch of local Stripe customer data. It takes a list of customer data as an argument and iterates over it, calling the <code>sync</code> method on each one.</p> <p>Sync Batch of Subscriptions</p> <pre><code>from django_stripe.actions import StripeSubscriptionAction\n\nstripe_action = StripeSubscriptionAction()\nbatch = [\n    {\n        \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",\n        \"object\": \"subscription\",\n        \"application_fee_percent\": None,\n        \"billing_cycle_anchor\": 1643715200,\n        \"billing_thresholds\": None,\n        \"cancel_at\": None,\n        \"cancel_at_period_end\": None,\n        \"canceled_at\": None,\n        \"collection_method\": \"charge_automatically\",\n        \"created\": 1643715200,\n        \"currency\": \"usd\",\n        \"current_period_end\": 1646307200,\n        \"current_period_start\": 1643715200,\n        \"customer\": \"cus_NhD8HD2bY8dP3V\",\n        \"days_until_due\": None,\n        \"default_payment_method\": None,\n        \"default_source\": None,\n        \"default_tax_rates\": None,\n        \"discount\": None,\n        \"ended_at\": None,\n        \"items\": {\n            \"object\": \"list\",\n            \"data\": [\n                {\n                    \"id\": \"si_NhD8HD2bY8dP3V\",\n                    \"object\": \"subscription_item\",\n                    \"billing_thresholds\": None,\n                    \"created\": 1643715200,\n                    \"metadata\": {},\n                    \"plan\": {\n                        \"id\": \"price_1MowQVLkdIwHu7ixeRlqHVzb\",\n                        \"object\": \"price\",\n                        \"active\": True,\n                        \"billing_scheme\": \"per_unit\",\n                        \"currency\": \"usd\",\n                        \"livemode\": False,\n                        \"lookup_key\": None,\n                        \"metadata\": {},\n                        \"nickname\": None,\n                        \"product\": \"prod_NhD8HD2bY8dP3V\",\n                        \"recurring\": {\n                            \"aggregate_usage\": None,\n                            \"interval\": \"month\",\n                            \"interval_count\": 1,\n                            \"usage_type\": \"licensed\"\n                        },\n                        \"tiers_mode\": None,\n                        \"transform_quantity\": None,\n                        \"type\": \"recurring\",\n                        \"unit_amount\": 1000,\n                        \"unit_amount_decimal\": \"1000\"\n                    },\n                    \"quantity\": 1,\n                    \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\"\n                }\n            ],\n            \"has_more\": False,\n            \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"\n        },\n        \"latest_invoice\": \"in_1MowQVLkdIwHu7ixeRlqHVzv\",\n        \"livemode\": False,\n        \"metadata\": {},\n        \"pause_collection\": None,\n        \"pending_invoice_item_interval\": None,\n        \"pending_setup_intent\": None,\n        \"pending_update\": None,\n        \"plan\": {\n            \"id\": \"price_1MowQVLkdIwHu7ixeRlqHVzb\",\n            \"object\": \"price\",\n            \"active\": True,\n            \"billing_scheme\": \"per_unit\",\n            \"currency\": \"usd\",\n            \"livemode\": False,\n            \"lookup_key\": None,\n            \"metadata\": {},\n            \"nickname\": None,\n            \"product\": \"prod_NhD8HD2bY8dP3V\",\n            \"recurring\": {\n                \"aggregate_usage\": None,\n                \"interval\": \"month\",\n                \"interval_count\": 1,\n                \"usage_type\": \"licensed\"\n            },\n            \"tiers_mode\": None,\n            \"transform_quantity\": None,\n            \"type\": \"recurring\",\n            \"unit_amount\": 1000,\n            \"unit_amount_decimal\": \"1000\"\n        },\n        \"quantity\": 1,\n        \"schedule\": None,\n        \"start_date\": 1643715200,\n        \"status\": \"active\",\n        \"transfer_data\": None,\n        \"trial_end\": None,\n        \"trial_start\": None\n    }\n]\nstripe_action.sync_batch(batch)\n</code></pre> <p>In this example, the <code>sync_batch</code> method is called with a list of customer data to synchronize.</p>"},{"location":"library/actions/billings/subscriptions/#soft-delete-subscription","title":"Soft Delete Subscription","text":"<p>The <code>StripeSubscriptionAction</code> class also provides a soft delete method, which allows you to mark a customer as deleted without actually deleting it from the local database.</p> <p>Methods: <code>soft_delete(self, stripe_id: str)</code></p> <p>This method is used to soft delete a customer by its Stripe ID. It marks the customer as deleted in the local database.</p> <p>Soft Delete Subscription</p> <pre><code>from django_stripe.actions import StripeSubscriptionAction\n\nstripe_action = StripeSubscriptionAction()\nstripe_id = 'sub_1MowQVLkdIwHu7ixeRlqHVzs'\nstripe_action.soft_delete(stripe_id)\n</code></pre> <p>In this example, the <code>soft_delete</code> method is called with a Stripe ID to soft delete the customer.</p>"},{"location":"library/actions/core/customers/","title":"Stripe Customer Action","text":"<p>The <code>StripeCustomerAction</code> class is a part of the Django Stripe library, which provides a set of actions for synchronizing local Stripe customer data with the Stripe API. This class is designed to handle the complexities of retrieving and updating customer data, making it easier to integrate Stripe with your Django application.</p> <p>The <code>StripeCustomerAction</code> class is defined in the <code>django_stripe.actions</code> module and has the following key characteristics:</p> <ul> <li>Model Class: The <code>StripeCustomerAction</code> class is associated with the <code>StripeCustomer</code> model.</li> <li>Stripe Object Class: The class uses the <code>stripe.Customer</code> object to interact with the Stripe API.</li> <li>Syncing Method: The class provides a <code>sync_all</code> method to synchronize all local Stripe customer data with the Stripe API.</li> </ul> <p>Overall, the <code>StripeCustomerAction</code> class provides a convenient and efficient way to manage Stripe customer data in your Django application.</p>"},{"location":"library/actions/core/customers/#methods","title":"Methods","text":""},{"location":"library/actions/core/customers/#sync-all-customers","title":"Sync All Customers","text":"<p>Method: <code>sync_all(self)</code></p> <p>This method is used to synchronize all local Stripe customer data with the Stripe API. It retrieves a batch of customers from the Stripe API and then iterates over them, calling the <code>sync</code> method on each one.</p> <p>Sync all customers</p> <pre><code>from django_stripe.actions import StripeCustomerAction\n\nstripe_action = StripeCustomerAction()\nstripe_action.sync_all()\n</code></pre> <p>In this example, the <code>sync_all</code> method is called to synchronize all local Stripe customer data with the Stripe API.</p>"},{"location":"library/actions/core/customers/#sync-customers-for-given-ids","title":"Sync Customers for given IDs","text":"<p>Method: <code>sync_by_ids(self, ids: list)</code></p> <p>This method is used to synchronize local Stripe customer data for a specific list of customer IDs. It retrieves the customers from the Stripe API and then iterates over them, calling the <code>sync</code> method on each one.</p> <p>Sync Customers for given IDs</p> <pre><code>from django_stripe.actions import StripeCustomerAction\n\nstripe_action = StripeCustomerAction()\nids = ['cus_123456789', 'cus_987654321']\nstripe_action.sync_by_ids(ids)\n</code></pre> <p>In this example, the <code>sync_by_ids</code> method is called with a list of customer IDs to synchronize.</p>"},{"location":"library/actions/core/customers/#sync-batch-of-customers","title":"Sync Batch of Customers","text":"<p>Methods: <code>sync_batch(self, batch:list[dict])</code></p> <p>This method is used to synchronize a batch of local Stripe customer data. It takes a list of customer data as an argument and iterates over it, calling the <code>sync</code> method on each one.</p> <p>Sync Batch of Customers</p> <pre><code>from django_stripe.actions import StripeCustomerAction\n\nstripe_action = StripeCustomerAction()\nbatch = [\n    {'id': 'cus_123456789', 'name': 'John Doe', 'email': 'john.doe@example.com'},\n    {'id': 'cus_987654321', 'name': 'Jane Doe', 'email': 'jane.doe@example.com'}\n]\nstripe_action.sync_batch(batch)\n</code></pre> <p>In this example, the <code>sync_batch</code> method is called with a list of customer data to synchronize.</p>"},{"location":"library/actions/core/customers/#soft-delete-customer","title":"Soft Delete Customer","text":"<p>The <code>StripeCustomerAction</code> class also provides a soft delete method, which allows you to mark a customer as deleted without actually deleting it from the local database.</p> <p>Methods: <code>soft_delete(self, stripe_id: str)</code></p> <p>This method is used to soft delete a customer by its Stripe ID. It marks the customer as deleted in the local database.</p> <p>Soft Delete Customer</p> <pre><code>from django_stripe.actions import StripeCustomerAction\n\nstripe_action = StripeCustomerAction()\nstripe_id = 'cus_123456789'\nstripe_action.soft_delete(stripe_id)\n</code></pre> <p>In this example, the <code>soft_delete</code> method is called with a Stripe ID to soft delete the customer.</p>"},{"location":"library/actions/core/events/","title":"Stripe Event Action","text":"<p>The <code>StripeEventAction</code> class is a crucial component of the Django Stripe library, responsible for handling and processing Stripe events. This documentation provides a detailed explanation of the class, its methods, and examples of usage.</p>"},{"location":"library/actions/core/events/#class-overview","title":"Class Overview","text":"<p>The <code>StripeEventAction</code> class is defined in the <code>django_stripe.actions</code> module. It provides methods for adding and processing Stripe events, as well as linking customers to event objects.</p>"},{"location":"library/actions/core/events/#methods","title":"Methods","text":""},{"location":"library/actions/core/events/#add-stripe-event","title":"Add Stripe event","text":"<p>The <code>add</code> method is used to add a Stripe event to the system. It takes the following arguments:</p> Argument Description <code>stripe_id</code> The ID of the Stripe event. <code>kind</code> The type of Stripe event (e.g., <code>invoice.created</code>, <code>customer.updated</code>, etc.). <code>livemode</code> A boolean indicating whether the event was triggered in live mode or not. <code>api_version</code> The version of the Stripe API used to trigger the event. <code>message</code> The data associated with the event. <code>request</code> The request object that triggered the event (optional). <code>pending_webhooks</code> The number of pending webhooks (optional). <p>Add Stripe event</p> <pre><code>from django_stripe.actions import StripeEventAction\n\nstripe_id = \"evt_123456789\"\nkind = \"invoice.created\"\nlivemode = True\napi_version = \"2022-11-15\"\nmessage = {\"id\": \"in_123456789\", \"object\": \"invoice\", \"amount_paid\": 1000}\n\nStripeEventAction.add(stripe_id, kind, livemode, api_version, message)\n</code></pre> <p>This example adds a Stripe event for an invoice creation, with the specified <code>stripe_id</code>, <code>kind</code>, <code>livemode</code>, <code>api_version</code>, and <code>message</code>.</p>"},{"location":"library/actions/core/events/#link-customer","title":"Link Customer","text":"<p>The <code>link_customer</code> method is used to link a customer to a Stripe event object. It takes the following argument:</p> <p>Method: <code>link_customer(self, event: Event, customer: Customer)</code></p> Argument Description <code>event</code> The <code>django_stripe.stripe.models.Event</code> object to link the customer to. <code>customer</code> The <code>django_stripe.stripe.models.Customer</code> object <p>Link Customer</p> <pre><code>from django_stripe.actions import StripeEventAction\nfrom django_stripe.stripe.models import Event\n\nevent = Event.objects.get(id=\"evt_123456789\")\ncustomer = Customer.objects.get(id=\"cu_123456789\")\n\nStripeEventAction.link_customer(event, customer)\n</code></pre> <p>This example links a customer to a Stripe event object.</p>"},{"location":"library/actions/core/events/#usage","title":"Usage","text":"<p>The <code>StripeEventAction</code> class can be used in various scenarios, such as:</p> <ul> <li>Processing Stripe webhooks: You can use the <code>add</code> method to add Stripe events to the system when a webhook is triggered.</li> <li>Syncing Stripe data: You can use the <code>link_customer</code> method to link customers to Stripe event objects when syncing Stripe data.</li> </ul>"},{"location":"library/actions/core/events/#best-practices","title":"Best Practices","text":"<ul> <li>Always validate the <code>stripe_id</code> and <code>kind</code> arguments before calling the <code>add</code> method.</li> <li>Use the <code>request</code> argument to pass the request object that triggered the event, if available.</li> <li>Use the <code>pending_webhooks</code> argument to pass the number of pending webhooks, if available.</li> <li>Always check the <code>livemode</code> argument to determine whether the event was triggered in live mode or not.</li> </ul>"},{"location":"library/actions/mixins/stripe_soft_delete_mixin/","title":"Stripe Soft Delete Action Mixin","text":"<p>The <code>StripeSoftDeleteMixin</code> is a mixin class that provides a soft delete method for Stripe objects. This mixin is designed to be used with Django models and allows developers to mark Stripe objects as deleted without actually deleting them from the local database.</p>"},{"location":"library/actions/mixins/stripe_soft_delete_mixin/#extending-the-mixin","title":"Extending the Mixin","text":"<p>To extend the <code>StripeSoftDeleteMixin</code> and build your own action, you need to create a new class that inherits from the mixin and defines the <code>model_class</code> attribute. The <code>model_class</code> attribute should be set to the Django model that you want to use with the mixin.</p> <p>Example</p> <pre><code>from django_stripe.actions import StripeSoftDeleteActionMixin\nfrom django_stripe.models import MyStripeModel\n\nclass MyStripeAction(StripeSoftDeleteActionMixin):\n    model_class = MyStripeModel\n\nmy_action = MyStripeAction()\nstripe_id = 'cus_123456789'\nmy_action.soft_delete(stripe_id)\n</code></pre>"},{"location":"library/actions/mixins/stripe_soft_delete_mixin/#methods","title":"Methods","text":""},{"location":"library/actions/mixins/stripe_soft_delete_mixin/#soft-delete-stripe-object","title":"Soft Delete Stripe Object","text":"<p>This method is used to soft delete a Stripe object by its Stripe ID. It marks the object as deleted in the local database by setting the <code>date_purged</code> field to the current timestamp.</p> <p>Method: <code>soft_delete(self, stripe_id: str)</code></p> Argument Description <code>stripe_id</code> The Stripe ID of the object to be deleted. <p>Example</p> <pre><code>from django_stripe.actions.mixins import StripeSoftDeleteActionMixin\n\nclass MyStripeAction(StripeSoftDeleteActionMixin):\n    model_class = MyStripeModel\n\nmy_action = MyStripeAction()\nstripe_id = 'cus_123456789'\nmy_action.soft_delete(stripe_id)\n</code></pre>"},{"location":"library/actions/mixins/stripe_soft_delete_mixin/#customizing-the-mixin","title":"Customizing the Mixin","text":"<p>You can customize the mixin by overriding the <code>soft_delete</code> method or adding new methods to the class. For example, you can add a new method to handle the deletion of related objects.</p> <p>Example <pre><code>from django_stripe.actions.mixins import StripeSoftDeleteActionMixin\nfrom django_stripe.models import MyStripeModel\n\nclass MyStripeAction(StripeSoftDeleteActionMixin):\n    model_class = MyStripeModel\n\n    def soft_delete(self, stripe_id: str):\n        # Call the parent method to mark the object as deleted\n        super().soft_delete(stripe_id)\n\n        # Delete related objects\n        related_objects = self.model_class.related_objects.filter(stripe_id=stripe_id)\n        related_objects.delete()\n\nmy_action = MyStripeAction()\nstripe_id = 'cus_123456789'\nmy_action.soft_delete(stripe_id)\n</code></pre></p>"},{"location":"library/actions/mixins/stripe_soft_delete_mixin/#best-practices","title":"Best Practices","text":"<ul> <li>Always use the <code>soft_delete</code> method to mark objects as deleted, rather than deleting them directly.</li> <li>Use the <code>model_class</code> attribute to specify the Django model that you want to use with the mixin.</li> <li>Override the <code>soft_delete</code> method or add new methods to the class to customize the mixin.</li> <li>Use the <code>super()</code> function to call the parent method when overriding the <code>soft_delete</code> method.</li> </ul>"},{"location":"library/actions/mixins/stripe_sync_mixin/","title":"Stripe Sync Action Mixin","text":"<p><code>StripeSyncActionMixin</code> is a mixin class that provides a set of methods for synchronizing your local database via the Stripe API. It allows you to sync data from Stripe to your local database.</p>"},{"location":"library/actions/mixins/stripe_sync_mixin/#extending-stripesyncactionmixin","title":"Extending StripeSyncActionMixin","text":"<p>To create your own actions, you can extend <code>StripeSyncActionMixin</code> and override the methods as needed. Here is an example:</p> <p>Extending <code>StripeSyncActionMixin</code></p> <pre><code>from django_stripe.actions.mixins import StripeSyncActionMixin\nfrom django_stripe.models import StripeCustomer\n\nclass StripeCustomerAction(StripeSyncActionMixin):\n    model_class = StripeCustomer\n    stripe_object_class = stripe.Customer\n\n    def pre_set_defualt(self, stripe_data: dict):\n        # Perform any necessary actions before setting default values\n        print(\"Before setting default values\")\n\n    def set_default(self, stripe_data: dict):\n        # Set default values for the local model object\n        defaults = {\n            \"email\": stripe_data[\"email\"],\n            \"name\": stripe_data[\"name\"],\n        }\n        return defaults\n\n    def post_set_default(self, defaults: dict):\n        # Perform any necessary actions after setting default values\n        print(\"After setting default values\")\n</code></pre> <p>In this example, we create a <code>StripeCustomerAction</code> class that extends <code>StripeSyncActionMixin</code>. We override the <code>pre_set_defualt</code>, <code>set_default</code>, and <code>post_set_default</code> methods to perform any necessary actions.</p>"},{"location":"library/actions/mixins/stripe_sync_mixin/#using-stripesyncactionmixin","title":"Using StripeSyncActionMixin","text":"<p>To use <code>StripeSyncActionMixin</code>, you can create an instance of your action class and call the <code>sync</code> method:</p> <p>Using methods in <code>StripeSyncActionMixin</code></p> <pre><code>from django_stripe.actions import StripeCustomerAction\n\nstripe_action = StripeCustomerAction()\nstripe_action.sync_all()\n</code></pre> <p>This will sync all the Stripe customers with the local <code>StripeCustomer</code> model.</p>"},{"location":"library/actions/mixins/stripe_sync_mixin/#methods","title":"Methods","text":""},{"location":"library/actions/mixins/stripe_sync_mixin/#sync-stripe-data","title":"Sync Stripe Data","text":"<p>Synchronizes a local data from the Stripe API.</p> <p>Method: <code>sync(self, stripe_data: dict)</code></p> Argument Description <code>stripe_data</code> data from Stripe API <p>This method is the core of the mixin. It takes in Stripe data, sets default values, and then updates or creates a local model object.</p>"},{"location":"library/actions/mixins/stripe_sync_mixin/#sync-data-by-stripe-ids","title":"Sync data by stripe IDs","text":"<p>Synchronizes a local data from the Stripe API by IDs.</p> <p>Method: <code>sync_by_ids(self, ids: list)</code></p> Argument Description <code>ids</code> list of stripe IDs <p>This method is similar to <code>sync</code>, but it takes in a list of IDs instead of Stripe data.</p>"},{"location":"library/actions/mixins/stripe_sync_mixin/#set-default-values","title":"Set default values","text":"<p>Method: <code>set_default(self, stripe_data: dict)</code></p> <p>Sets default values for the local model object.</p> Argument Description <code>stripe_data</code> data from Stripe API <p>This method is called by <code>sync</code> and allows you to set default values for the local model object.</p>"},{"location":"library/actions/mixins/stripe_sync_mixin/#pre-processing-setting-default-values","title":"Pre-processing setting default values","text":"<p>Method: <code>pre_set_defualt(self, stripe_data: dict)</code></p> <p>Called before setting default values.</p> Argument Description <code>stripe_data</code> data from Stripe API <p>This method is called by <code>sync</code> and allows you to perform any necessary actions before setting default values.</p>"},{"location":"library/actions/mixins/stripe_sync_mixin/#post-processing-setting-default-values","title":"Post-processing setting default values","text":"<p>Method: <code>post_set_default(self, defaults: dict)</code></p> <p>Called after setting default values.</p> Argument Description <code>defaults</code> default values that we got from <code>set_default</code> method <p>This method is called by <code>sync</code> and allows you to perform any necessary actions after setting default values.</p>"},{"location":"library/actions/mixins/stripe_sync_mixin/#customizing-the-mixin","title":"Customizing the Mixin","text":"<p>You can customize the mixin by overriding the <code>sync</code> method or adding new methods to the class. For example, you can add a new method to handle the syncing of related objects.</p> <p>Example</p> <pre><code>import stripe\nfrom django_stripe.actions.mixins import StripeSyncActionMixin\nfrom django_stripe.models import MyStripeModel\n\nclass MyStripeAction(StripeSyncActionMixin):\n    model_class = MyStripeModel # Your model class\n    stripe_object_class = stripe.Customer # Your Stripe object class\n\n    def sync(self, stripe_data: dict):\n        # Call the parent method to sync the data\n        super().sync(stripe_data)\n\n        # Sync related objects\n        related_objects = self.model_class.related_objects.filter(stripe_id=stripe_data[\"id\"])\n        related_objects.sync(stripe_data)\n</code></pre>"},{"location":"library/actions/mixins/stripe_sync_mixin/#best-practices","title":"Best Practices","text":"<ul> <li>Use <code>sync</code> method to sync data</li> <li>Use <code>set_default</code> method to set default values</li> <li>Use <code>pre_set_defualt</code> method to perform any necessary actions before setting default values</li> <li>Use <code>post_set_default</code> method to perform any necessary actions after setting default values</li> <li>Use <code>sync_by_ids</code> method to sync data by IDs</li> <li>Use <code>sync_all</code> method to sync all data from Stripe</li> </ul>"},{"location":"library/actions/products/coupons/","title":"Stripe Coupon Action","text":"<p>The <code>StripeCouponAction</code> class is a part of the Django Stripe library, which provides a set of actions for synchronizing local Stripe coupon data with the Stripe API. This class is designed to handle the complexities of retrieving and updating coupon data, making it easier to integrate Stripe with your Django application.</p> <p>The <code>StripeCouponAction</code> class is defined in the <code>django_stripe.actions</code> module and has the following key characteristics:</p> <ul> <li>Model Class: The <code>StripeCouponAction</code> class is associated with the <code>StripeCoupon</code> model.</li> <li>Stripe Object Class: The class uses the <code>stripe.Coupon</code> object to interact with the Stripe API.</li> <li>Syncing Method: The class provides a <code>sync_all</code> method to synchronize all local Stripe coupon data with the Stripe API.</li> </ul> <p>Overall, the <code>StripeCouponAction</code> class provides a convenient and efficient way to manage Stripe coupon data in your Django application.</p>"},{"location":"library/actions/products/coupons/#methods","title":"Methods","text":""},{"location":"library/actions/products/coupons/#sync-all-coupons","title":"Sync All Coupons","text":"<p>Method: <code>sync_all(self)</code></p> <p>This method is used to synchronize all local Stripe coupons data with the Stripe API. It retrieves a batch of coupons from the Stripe API and then iterates over them, calling the <code>sync</code> method on each one.</p> <p>Sync all coupons</p> <pre><code>from django_stripe.actions import StripeCouponAction\n\nstripe_action = StripeCouponAction()\nstripe_action.sync_all()\n</code></pre> <p>In this example, the <code>sync_all</code> method is called to synchronize all local Stripe customer data with the Stripe API.</p>"},{"location":"library/actions/products/coupons/#sync-coupons-for-given-ids","title":"Sync Coupons for given IDs","text":"<p>Method: <code>sync_by_ids(self, ids: list)</code></p> <p>This method is used to synchronize local Stripe customer data for a specific list of customer IDs. It retrieves the coupons from the Stripe API and then iterates over them, calling the <code>sync</code> method on each one.</p> <p>Sync Coupons for given IDs</p> <pre><code>from django_stripe.actions import StripeCouponAction\n\nstripe_action = StripeCouponAction()\nids = ['jMT0WJUD', 'jMT0WJUE']\nstripe_action.sync_by_ids(ids)\n</code></pre> <p>In this example, the <code>sync_by_ids</code> method is called with a list of customer IDs to synchronize.</p>"},{"location":"library/actions/products/coupons/#sync-batch-of-coupons","title":"Sync Batch of Coupons","text":"<p>Methods: <code>sync_batch(self, batch:list[dict])</code></p> <p>This method is used to synchronize a batch of local Stripe customer data. It takes a list of customer data as an argument and iterates over it, calling the <code>sync</code> method on each one.</p> <p>Sync Batch of Coupons</p> <pre><code>from django_stripe.actions import StripeCouponAction\n\nstripe_action = StripeCouponAction()\nbatch = [\n    {\n        'id': 'jMT0WJUE',\n        'object': 'coupon',\n        'amount_off': 1000,\n        'created': 1679431181,\n        'currency': 'usd',\n        'duration': 'forever',\n        'duration_in_months': None,\n        'livemode': False,\n        'max_redemptions': None,\n        'metadata': {},\n        'name': None,\n        'percent_off': None,\n        'redeem_by': None,\n        'times_redeemed': 0,\n    },\n    {\n        'id': 'jMT0WJUD',\n        'object': 'coupon',\n        'amount_off': 1000,\n        'created': 1679431181,\n        'currency': 'usd',\n        'duration': 'forever',\n        'duration_in_months': None,\n        'livemode': False,\n        'max_redemptions': None,\n        'metadata': {},\n        'name': None,\n        'percent_off': None,\n        'redeem_by': None,\n        'times_redeemed': 0,\n    },\n]\nstripe_action.sync_batch(batch)\n</code></pre> <p>In this example, the <code>sync_batch</code> method is called with a list of customer data to synchronize.</p>"},{"location":"library/actions/products/coupons/#soft-delete-coupon","title":"Soft Delete Coupon","text":"<p>The <code>StripeCouponAction</code> class also provides a soft delete method, which allows you to mark a customer as deleted without actually deleting it from the local database.</p> <p>Methods: <code>soft_delete(self, stripe_id: str)</code></p> <p>This method is used to soft delete a customer by its Stripe ID. It marks the customer as deleted in the local database.</p> <p>Soft Delete Coupon</p> <pre><code>from django_stripe.actions import StripeCouponAction\n\nstripe_action = StripeCouponAction()\nstripe_id = 'jMT0WJUD'\nstripe_action.soft_delete(stripe_id)\n</code></pre> <p>In this example, the <code>soft_delete</code> method is called with a Stripe ID to soft delete the customer.</p>"},{"location":"library/actions/products/prices/","title":"Stripe Price Action","text":"<p>The <code>StripePriceAction</code> class is a part of the Django Stripe library, which provides a set of actions for synchronizing local Stripe price data with the Stripe API. This class is designed to handle the complexities of retrieving and updating price data, making it easier to integrate Stripe with your Django application.</p> <p>The <code>StripePriceAction</code> class is defined in the <code>django_stripe.actions</code> module and has the following key characteristics:</p> <ul> <li>Model Class: The <code>StripePriceAction</code> class is associated with the <code>StripePrice</code> model.</li> <li>Stripe Object Class: The class uses the <code>stripe.Price</code> object to interact with the Stripe API.</li> <li>Syncing Method: The class provides a <code>sync_all</code> method to synchronize all local Stripe price data with the Stripe API.</li> </ul> <p>Overall, the <code>StripePriceAction</code> class provides a convenient and efficient way to manage Stripe price data in your Django application.</p>"},{"location":"library/actions/products/prices/#methods","title":"Methods","text":""},{"location":"library/actions/products/prices/#sync-all-prices","title":"Sync All Prices","text":"<p>Method: <code>sync_all(self)</code></p> <p>This method is used to synchronize all local Stripe prices data with the Stripe API. It retrieves a batch of prices from the Stripe API and then iterates over them, calling the <code>sync</code> method on each one.</p> <p>Sync all prices</p> <pre><code>from django_stripe.actions import StripePriceAction\n\nstripe_action = StripePriceAction()\nstripe_action.sync_all()\n</code></pre> <p>In this example, the <code>sync_all</code> method is called to synchronize all local Stripe customer data with the Stripe API.</p>"},{"location":"library/actions/products/prices/#sync-prices-for-given-ids","title":"Sync Prices for given IDs","text":"<p>Method: <code>sync_by_ids(self, ids: list)</code></p> <p>This method is used to synchronize local Stripe customer data for a specific list of customer IDs. It retrieves the prices from the Stripe API and then iterates over them, calling the <code>sync</code> method on each one.</p> <p>Sync Prices for given IDs</p> <pre><code>from django_stripe.actions import StripePriceAction\n\nstripe_action = StripePriceAction()\nids = ['price_1MoBy6LkdIwHu7ixZhnattbe', 'price_1MoBy6LkdIwHu7ixZhnattbh']\nstripe_action.sync_by_ids(ids)\n</code></pre> <p>In this example, the <code>sync_by_ids</code> method is called with a list of customer IDs to synchronize.</p>"},{"location":"library/actions/products/prices/#sync-batch-of-prices","title":"Sync Batch of Prices","text":"<p>Methods: <code>sync_batch(self, batch:list[dict])</code></p> <p>This method is used to synchronize a batch of local Stripe customer data. It takes a list of customer data as an argument and iterates over it, calling the <code>sync</code> method on each one.</p> <p>Sync Batch of Prices</p> <pre><code>from django_stripe.actions import StripePriceAction\n\nstripe_action = StripePriceAction()\nbatch = [\n    {\n        'id': 'price_1MoBy5LkdIwHu7ixZhnattbh',\n        'object': 'price',\n        'active': True,\n        'billing_scheme': 'per_unit',\n        'created': 1679431181,\n        'currency': 'usd',\n        'custom_unit_amount': None,\n        'livemode': False,\n        'lookup_key': None,\n        'metadata': {},\n        'nickname': None,\n        'product': 'prod_NWjs8kKbJWmuuc',\n        'recurring': {\n            'aggregate_usage': None,\n            'interval': 'month',\n            'interval_count': 1,\n            'trial_period_days': None,\n            'usage_type': 'licensed',\n        },\n        'tax_behavior': 'unspecified',\n        'tiers_mode': None,\n        'transform_quantity': None,\n        'type': 'recurring',\n        'unit_amount': 1000,\n        'unit_amount_decimal': '1000',\n    },\n    {\n        'id': 'price_1MoBy6LkdIwHu7ixZhnattbh',\n        'object': 'price',\n        'active': True,\n        'billing_scheme': 'per_unit',\n        'created': 1679431181,\n        'currency': 'usd',\n        'custom_unit_amount': None,\n        'livemode': False,\n        'lookup_key': None,\n        'metadata': {},\n        'nickname': None,\n        'product': 'prod_NWjs8kKbJWmuuc',\n        'recurring': {\n            'aggregate_usage': None,\n            'interval': 'month',\n            'interval_count': 1,\n            'trial_period_days': None,\n            'usage_type': 'licensed',\n        },\n        'tax_behavior': 'unspecified',\n        'tiers_mode': None,\n        'transform_quantity': None,\n        'type': 'recurring',\n        'unit_amount': 1000,\n        'unit_amount_decimal': '1000',\n    },\n]\nstripe_action.sync_batch(batch)\n</code></pre> <p>In this example, the <code>sync_batch</code> method is called with a list of customer data to synchronize.</p>"},{"location":"library/actions/products/prices/#soft-delete-price","title":"Soft Delete Price","text":"<p>The <code>StripePriceAction</code> class also provides a soft delete method, which allows you to mark a customer as deleted without actually deleting it from the local database.</p> <p>Methods: <code>soft_delete(self, stripe_id: str)</code></p> <p>This method is used to soft delete a customer by its Stripe ID. It marks the customer as deleted in the local database.</p> <p>Soft Delete Price</p> <pre><code>from django_stripe.actions import StripePriceAction\n\nstripe_action = StripePriceAction()\nstripe_id = 'price_1MoBy6LkdIwHu7ixZhnattbh'\nstripe_action.soft_delete(stripe_id)\n</code></pre> <p>In this example, the <code>soft_delete</code> method is called with a Stripe ID to soft delete the customer.</p>"},{"location":"library/actions/products/products/","title":"Stripe Product Action","text":"<p>The <code>StripeProductAction</code> class is a part of the Django Stripe library, which provides a set of actions for synchronizing local Stripe product data with the Stripe API. This class is designed to handle the complexities of retrieving and updating product data, making it easier to integrate Stripe with your Django application.</p> <p>The <code>StripeProductAction</code> class is defined in the <code>django_stripe.actions</code> module and has the following key characteristics:</p> <ul> <li>Model Class: The <code>StripeProductAction</code> class is associated with the <code>StripeProduct</code> model.</li> <li>Stripe Object Class: The class uses the <code>stripe.Product</code> object to interact with the Stripe API.</li> <li>Syncing Method: The class provides a <code>sync_all</code> method to synchronize all local Stripe product data with the Stripe API.</li> </ul> <p>Overall, the <code>StripeProductAction</code> class provides a convenient and efficient way to manage Stripe product data in your Django application.</p>"},{"location":"library/actions/products/products/#methods","title":"Methods","text":""},{"location":"library/actions/products/products/#sync-all-products","title":"Sync All Products","text":"<p>Method: <code>sync_all(self)</code></p> <p>This method is used to synchronize all local Stripe products data with the Stripe API. It retrieves a batch of products from the Stripe API and then iterates over them, calling the <code>sync</code> method on each one.</p> <p>Sync all products</p> <pre><code>from django_stripe.actions import StripeProductAction\n\nstripe_action = StripeProductAction()\nstripe_action.sync_all()\n</code></pre> <p>In this example, the <code>sync_all</code> method is called to synchronize all local Stripe customer data with the Stripe API.</p>"},{"location":"library/actions/products/products/#sync-products-for-given-ids","title":"Sync Products for given IDs","text":"<p>Method: <code>sync_by_ids(self, ids: list)</code></p> <p>This method is used to synchronize local Stripe customer data for a specific list of customer IDs. It retrieves the products from the Stripe API and then iterates over them, calling the <code>sync</code> method on each one.</p> <p>Sync Products for given IDs</p> <pre><code>from django_stripe.actions import StripeProductAction\n\nstripe_action = StripeProductAction()\nids = ['prod_123456789', 'prod_987654321']\nstripe_action.sync_by_ids(ids)\n</code></pre> <p>In this example, the <code>sync_by_ids</code> method is called with a list of customer IDs to synchronize.</p>"},{"location":"library/actions/products/products/#sync-batch-of-products","title":"Sync Batch of Products","text":"<p>Methods: <code>sync_batch(self, batch:list[dict])</code></p> <p>This method is used to synchronize a batch of local Stripe customer data. It takes a list of customer data as an argument and iterates over it, calling the <code>sync</code> method on each one.</p> <p>Sync Batch of Products</p> <pre><code>from django_stripe.actions import StripeProductAction\n\nstripe_action = StripeProductAction()\nbatch = [\n    {'id': 'prod_123456789', 'name': 'Product 1', 'description': 'test product'},\n    {'id': 'prod_987654321', 'name': 'Product 2', 'description': 'test product'}\n]\nstripe_action.sync_batch(batch)\n</code></pre> <p>In this example, the <code>sync_batch</code> method is called with a list of customer data to synchronize.</p>"},{"location":"library/actions/products/products/#soft-delete-product","title":"Soft Delete Product","text":"<p>The <code>StripeProductAction</code> class also provides a soft delete method, which allows you to mark a customer as deleted without actually deleting it from the local database.</p> <p>Methods: <code>soft_delete(self, stripe_id: str)</code></p> <p>This method is used to soft delete a customer by its Stripe ID. It marks the customer as deleted in the local database.</p> <p>Soft Delete Product</p> <pre><code>from django_stripe.actions import StripeProductAction\n\nstripe_action = StripeProductAction()\nstripe_id = 'prod_123456789'\nstripe_action.soft_delete(stripe_id)\n</code></pre> <p>In this example, the <code>soft_delete</code> method is called with a Stripe ID to soft delete the customer.</p>"},{"location":"library/webhooks/","title":"Stripe Webhook","text":"<p>The <code>StripeWebhook</code> class is a powerful tool for processing Stripe webhooks in your Django application. It provides a simple and flexible way to handle incoming webhook requests, allowing you to focus on implementing your business logic.</p>"},{"location":"library/webhooks/#using-the-stripewebhook","title":"Using the <code>StripeWebhook</code>","text":"<p>To use the <code>StripeWebhook</code> class, you'll need to create a new class that inherits from it. This new class will define the logic for processing incoming webhook requests.</p> <p>Here's an example of how you might use the <code>StripeWebhook</code> class to implement a new webhook:</p> <p>Example Webhook</p> <pre><code>from django_stripe.actions import StripeWebhook\n\nclass MyWebhook(StripeWebhook):\n    def process_webhook(self, event_data):\n        # Process the incoming webhook request here\n        # For example, you might update a database record or send a notification\n        print(\"Received webhook event:\", event_data)\n</code></pre> <p>In this example, the <code>MyWebhook</code> class inherits from <code>StripeWebhook</code> and defines a <code>process_webhook</code> method. This method will be called whenever an incoming webhook request is received.</p>"},{"location":"library/webhooks/#automatic-registration","title":"Automatic Registration","text":"<p>One of the benefits of using the <code>StripeWebhook</code> class is that you don't need to register the webhook manually. The class will automatically register the webhook with Stripe when it's instantiated.</p> <p>This means that you can focus on implementing your business logic, without worrying about the underlying registration process.</p>"},{"location":"library/webhooks/#example-use-case","title":"Example Use Case","text":"<p>Here's an example of how you might use the <code>StripeWebhook</code> class to implement a webhook that updates a database record when a customer's subscription is updated:</p> <p>Example Use Case</p> <pre><code>from django_stripe.actions import StripeWebhook\nfrom django_stripe.models import StripeCustomer\n\nclass SubscriptionUpdatedWebhook(StripeWebhook):\n    def process_webhook(self, event_data):\n        customer_id = event_data[\"data\"][\"object\"][\"customer\"]\n        customer = StripeCustomer.objects.get(stripe_id=customer_id)\n        customer.subscription_status = event_data[\"data\"][\"object\"][\"status\"]\n        customer.save()\n</code></pre> <p>In this example, the <code>SubscriptionUpdatedWebhook</code> class inherits from <code>StripeWebhook</code> and defines a <code>process_webhook</code> method. This method updates a <code>Customer</code> record in the database when a subscription is updated.</p>"},{"location":"library/webhooks/#tips-and-best-practices","title":"Tips and Best Practices","text":"<ul> <li>Make sure to handle any exceptions that might occur during the processing of incoming webhook requests.</li> <li>Use the <code>process_webhook</code> method to perform any necessary business logic, such as updating database records or sending notifications.</li> <li>Use the <code>event_data</code> parameter to access the incoming webhook request data.</li> <li>Use the <code>stripe</code> library to interact with the Stripe API, if necessary.</li> </ul> <p>By following these tips and best practices, you can use the <code>StripeWebhook</code> class to implement powerful and flexible webhooks in your Django application.</p>"},{"location":"library/webhooks/#implementing-webhook-api","title":"Implementing Webhook API","text":"<p>To implement a webhook API, you need to create a view that handles incoming webhook requests and processes the event data using the <code>StripeWebhook</code> class.</p> <p>Here is an example of how to implement a webhook API using Django:</p> <p>Implement Webhook API using Django</p> <pre><code>from django.http import HttpResponse\nfrom django.views.decorators.http import require_http_methods\nfrom django_stripe.actions import StripeWebhook\n\n@require_http_methods([\"POST\"])\ndef stripe_webhook(request):\n    event_data = request.json()\n    StripeWebhook.process_webhook(event_data)\n    return HttpResponse(\"Webhook processed successfully\")\n</code></pre> <p>This example creates a view that handles incoming webhook requests, processes the event data using the <code>StripeWebhook</code> class, and returns a success response.</p> <p>You can also use a library like Django Rest Framework to implement a webhook API. Here is an example:</p> <p>Implement Webhook API using DRF</p> <pre><code>from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom django_stripe.actions import StripeWebhook\n\nclass StripeWebhookView(APIView):\n    def post(self, request):\n        event_data = request.data\n        StripeWebhook.process_webhook(event_data)\n        return Response(\"Webhook processed successfully\")\n</code></pre> <p>This example creates a view that handles incoming webhook requests, processes the event data using the <code>StripeWebhook</code> class, and returns a success response.</p>"},{"location":"library/webhooks/#registering-webhook-api","title":"Registering Webhook API","text":"<p>To register the webhook API, you need to add a URL pattern to your Django project's URL configuration. Here is an example:</p> <p>Example</p> <pre><code>from django.urls import path\nfrom .views import stripe_webhook\n\nurlpatterns = [\n    path(\"stripe/webhook/\", stripe_webhook, name=\"stripe_webhook\"),\n]\n</code></pre> <p>This example adds a URL pattern for the <code>stripe_webhook</code> view.</p> <p>You can also use a library like Django Rest Framework to register the webhook API. Here is an example:</p> <p>Example</p> <pre><code>from rest_framework.routers import DefaultRouter\nfrom .views import StripeWebhookView\n\nrouter = DefaultRouter()\nrouter.register(\"stripe/webhook\", StripeWebhookView, basename=\"stripe_webhook\")\n\nurlpatterns = router.urls\n</code></pre> <p>This example registers the <code>StripeWebhookView</code> view using the <code>DefaultRouter</code> class.</p>"},{"location":"library/webhooks/#included-webhook-events","title":"Included Webhook Events","text":"<p>The <code>django-stripe</code> library provides a set of built-in webhook events that it listens for by default. All these webhook events are located in the <code>django_stripe.webhooks</code> module.</p> <p>The following table lists all the webhook events that are included in <code>django-stripe</code> library by default.</p> Webhook Event Class Description customer.created <code>CustomerCreatedWebhook</code> Occurs whenever a customer is created customer.updated <code>CustomerUpdatedWebhook</code> Occurs whenever any property of a customer changes customer.deleted <code>CustomerDeletedWebhook</code> Occurs whenever a customer is deleted customer.subscription.created <code>SubscriptionCreatedWebhook</code> Occurs whenever a customer with no subscription is signed up for a plan. customer.subscription.updated <code>SubscriptionUpdatedWebhook</code> Occurs whenever a subscription changes. Examples would include switching from one plan to another, or switching status from trial to active. customer.subscription.deleted <code>SubscriptionDeletedWebhook</code> Occurs whenever a customer ends their subscription. customer.subscription.trial_will_end <code>SubscriptionTrialWillEndWebhook</code> Occurs whenever a customer's trial period is about to end. product.created <code>ProductCreatedWebhook</code> Occurs whenever a product is created. product.updated <code>ProductUpdatedWebhook</code> Occurs whenever any property of a product changes. product.deleted <code>ProductDeletedWebhook</code> Occurs whenever a product is deleted. price.created <code>PriceCreatedWebhook</code> Occurs whenever a price is created. price.updated <code>PriceUpdatedWebhook</code> Occurs whenever any property of a price changes. price.deleted <code>PriceDeletedWebhook</code> Occurs whenever a price is deleted. coupon.created <code>CouponCreatedWebhook</code> Occurs whenever a coupon is created. coupon.updated <code>CouponUpdatedWebhook</code> Occurs whenever any property of a coupon changes. coupon.deleted <code>CouponDeletedWebhook</code> Occurs whenever a coupon is deleted."},{"location":"library/webhooks/webhook/","title":"Webhook","text":"<p>Listen for events on your Stripe account so your integration can automatically trigger reactions.</p> <p>Stripe uses webhooks to notify your application when an event happens in your account. Webhooks are particularly useful for asynchronous events like when a customer\u2019s bank confirms a payment, a customer disputes a charge, a recurring payment succeeds, or when collecting subscription payments.</p> <p>A webhook enables Stripe to push real-time notifications to your app. Stripe uses HTTPS to send these notifications to your app as a JSON payload. You can then use these notifications to execute actions in your backend systems.</p>"},{"location":"library/webhooks/webhook/#webhook-events","title":"Webhook events","text":"<p>Following are the supported webhook events:</p> <ul> <li>Customer: <code>django_stripe.webhooks.customers</code> contains all the customer related webhook event<ul> <li>Create customer: <code>CustomerCreatedWebhook</code> will process the <code>customer.created</code> webhook event.</li> <li>Update customer: <code>CustomerUpdatedWebhook</code> will process the <code>customer.updated</code> webhook event.</li> <li>Delete customer: <code>CustomerDeletedWebhook</code> will process the <code>customer.deleted</code> webhook event.</li> </ul> </li> <li>Card: <code>django_stripe.webhooks.sources</code> contains all the card related webhook event<ul> <li>Create card: <code>CustomerCardCreatedWebhook</code> will process the <code>customer.source.created</code> webhook event.</li> <li>Update card: <code>CustomerCardUpdatedWebhook</code> will process the <code>customer.source.updated</code> webhook event.</li> <li>Delete card: <code>CustomerCardDeletedWebhook</code> will process the <code>customer.source.deleted</code> webhook event.</li> </ul> </li> <li>Subscription: <code>django_stripe.webhooks.subscriptions</code> contains all the subscriptions related webhook event<ul> <li>Create subscription: <code>CustomerSubscriptionCreatedWebhook</code> will process the <code>customer.subscription.created\"</code> webhook event.</li> <li>Update subscription: <code>CustomerSubscriptionUpdatedWebhook</code> will process the <code>customer.subscription.updated\"</code> webhook event.</li> <li>Subscription trial will end: <code>CustomerSubscriptionTrialWillEndWebhook</code> will process the <code>customer.subscription.trial_will_end\"</code> webhook event.</li> <li>Delete subscription: <code>CustomerSubscriptionDeletedWebhook</code> will process the <code>customer.subscription.deleted\"</code> webhook event.</li> </ul> </li> <li>Product: <code>django_stripe.webhooks.products</code> contains all the product related webhook event<ul> <li>Create product: <code>ProductCreatedWebhook</code> will process the <code>product.created</code> webhook event.</li> <li>Update product: <code>ProductUpdatedWebhook</code> will process the <code>product.updated</code> webhook event.</li> <li>Delete product: <code>ProductDeletedWebhook</code> will process the <code>product.deleted</code> webhook event.</li> </ul> </li> <li>Price: <code>django_stripe.webhooks.prices</code> contains all the price related webhook event<ul> <li>Create price: <code>PriceCreatedWebhook</code> will process the <code>price.created</code> webhook event.</li> <li>Update price: <code>PriceUpdatedWebhook</code> will process the <code>price.updated</code> webhook event.</li> <li>Delete price: <code>PriceDeletedWebhook</code> will process the <code>price.deleted</code> webhook event.</li> </ul> </li> <li>Coupon: <code>django_stripe.webhooks.coupons</code> contains all the coupon related webhook event<ul> <li>Create coupon: <code>CouponCreatedWebhook</code> will process the <code>coupon.created</code> webhook event.</li> <li>Update coupon: <code>CouponUpdatedWebhook</code> will process the <code>coupon.updated</code> webhook event.</li> <li>Delete coupon: <code>CouponDeletedWebhook</code> will process the <code>coupon.deleted</code> webhook event.</li> </ul> </li> </ul>"},{"location":"library/webhooks/webhook/#configure-webhook","title":"Configure Webhook","text":"<p>Create a view-set that will use StripeWebhook action to process the webhook event.</p> <p>Create webhook viewset</p> <pre><code>from django.http import Http404\nfrom rest_framework import viewsets\nfrom rest_framework.permissions import AllowAny\n\nfrom django_stripe.actions import StripeWebhook\nfrom project.base import response\nfrom payment.models import Event\n\n\nclass StripeWebhookViewSet(viewsets.GenericViewSet):\n    EVENT_MODEL = Event\n\n    # Check the webhook signatures\n    # Ref: https://stripe.com/docs/webhooks/signatures\n\n    def create(self, request, *args, **kwargs):\n        try:\n            event_data = request.data\n            StripeWebhook.process_webhook(event_data)\n        except Http404 as e:\n            raise e\n        return response.Ok({\"success\": True})\n</code></pre> <p>Register webhook view-set to an endpoint</p> <pre><code>from rest_framework.routers import DefaultRouter\n\nfrom payments.apis import StripeWebhookViewSet\n\n\ndefault_router = DefaultRouter(trailing_slash=False)\n\ndefault_router.register(\n    \"stripe/webhook\", StripeWebhookViewSet, basename=\"stripe-webhook\"\n)\n</code></pre>"},{"location":"library/webhooks/webhook/#custom-webhook-event","title":"Custom Webhook Event","text":"<p>To create a custom webhook event for a specific Stripe webhook event, you can inherit <code>StripeWebhook</code> from <code>django_stripe.webhooks.register</code> and implement your own webhook event processing logic.</p> <p>As an example, let's say you want to create a webhook event for the product.created event. You can create a new file<code>app/webhook/products.py</code> and define the webhook event class in it.</p> <p>Example</p> <pre><code># Django Stripe Stuff\nfrom django_stripe.actions import StripeProduct\nfrom django_stripe.webhooks.register import StripeWebhook\n\n\nclass ProductCreateWebhook(StripeWebhook):\n    name = \"product.created\"\n    description = \"Occurs whenever a new product is created.\"\n\n    def process_webhook(self):\n        StripeProduct().sync(self.event.message[\"data\"][\"object\"])\n</code></pre> <p>Once you have implemented the webhook event, you should import the webhook file in the <code>__init__.py</code> file of the app. This is required for the webhook event class to be registered.</p> <p>Example</p> <pre><code>import importlib\n\nimportlib.import_module(\"app.webhooks.products\")\n</code></pre> <p>Note</p> <p>If the class is not registered, then the webhook event won't be processed.</p>"}]}